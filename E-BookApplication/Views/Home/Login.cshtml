"use client";
import React from "react";

function MainComponent() {
  const [isLogin, setIsLogin] = useState(true);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const { signInWithCredentials, signUpWithCredentials } = useAuth();

  const onSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    if (!email || !password) {
      setError("Please fill in all fields");
      setLoading(false);
      return;
    }

    try {
      if (isLogin) {
        await signInWithCredentials({
          email,
          password,
          callbackUrl: "/",
          redirect: true,
        });
      } else {
        await signUpWithCredentials({
          email,
          password,
          callbackUrl: "/",
          redirect: true,
        });
      }
    } catch (err) {
      const errorMessages = {
        OAuthSignin: "Couldn't start authentication. Please try again.",
        OAuthCallback: "Authentication failed. Please try again.",
        OAuthCreateAccount: "Couldn't create account. Try another method.",
        EmailCreateAccount: "This email may already be registered.",
        Callback: "Something went wrong. Please try again.",
        OAuthAccountNotLinked: "Account linked to different method.",
        CredentialsSignin: "Invalid email or password.",
        AccessDenied: "Access denied.",
        Configuration: "Service temporarily unavailable.",
        Verification: "Link expired. Request a new one.",
      };

      setError(
        errorMessages[err.message] || "Something went wrong. Please try again."
      );
      setLoading(false);
    }
  };

  return (
<div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-red-50 flex items-center justify-center p-4 font-crimson-text">
    {/* Floating book icons */}
    <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <i className="fas fa-book absolute top-20 left-10 text-amber-200 text-2xl opacity-30 floating-book-1"></i>
        <i className="fas fa-book-open absolute top-32 right-20 text-orange-200 text-3xl opacity-25 floating-book-2"></i>
        <i className="fas fa-bookmark absolute bottom-40 left-20 text-red-200 text-xl opacity-35 floating-book-3"></i>
        <i className="fas fa-feather-alt absolute top-1/2 right-10 text-amber-300 text-2xl opacity-20 floating-book-4"></i>
        <i className="fas fa-scroll absolute bottom-20 right-1/3 text-orange-300 text-xl opacity-30 floating-book-5"></i>
    </div>

    <div className="w-full max-w-md relative">
        {/* Main card */}
        <div className="bg-white/95 backdrop-blur-sm rounded-3xl shadow-2xl border border-amber-100 overflow-hidden">
            {/* Header with book theme */}
            <div className="bg-gradient-to-r from-amber-600 to-orange-600 p-8 text-center relative">
                <div className="absolute inset-0 bg-black/10"></div>
                <div className="relative z-10">
                    <i className="fas fa-book-reader text-white text-4xl mb-4"></i>
                    <h1 className="text-3xl font-bold text-white mb-2">BookVault</h1>
                    <p className="text-amber-100 text-sm">
                        Your Digital Library Awaits
                    </p>
                </div>
            </div>

            {/* Toggle buttons */}
            <div className="p-6 pb-0">
                <div className="flex bg-gray-100 rounded-2xl p-1 mb-6">
                    <button onClick={() =>
                        setIsLogin(true)}
                        className={`flex-1 py-3 px-4 rounded-xl font-semibold transition-all duration-300 ${
                        isLogin
                        ? "bg-white text-amber-700 shadow-md"
                        : "text-gray-500 hover:text-gray-700"
                        }`}
                        >
                        <i className="fas fa-sign-in-alt mr-2"></i>
                        Sign In
                    </button>
                    <button onClick={() =>
                        setIsLogin(false)}
                        className={`flex-1 py-3 px-4 rounded-xl font-semibold transition-all duration-300 ${
                        !isLogin
                        ? "bg-white text-amber-700 shadow-md"
                        : "text-gray-500 hover:text-gray-700"
                        }`}
                        >
                        <i className="fas fa-user-plus mr-2"></i>
                        Sign Up
                    </button>
                </div>
            </div>

            {/* Form */}
            <form onSubmit={onSubmit} className="p-6 pt-0 space-y-6">
                <div className="space-y-4">
                    <div className="space-y-2">
                        <label className="block text-sm font-semibold text-gray-700 ml-1">
                            <i className="fas fa-envelope mr-2 text-amber-600"></i>
                            Email Address
                        </label>
                        <div className="relative">
                            <input required
                                   type="email"
                                   value={email}
                                   onChange={(e) => setEmail(e.target.value)}
                            placeholder="Enter your email"
                            className="w-full px-4 py-4 bg-gray-50 border-2 border-gray-200 rounded-2xl focus:border-amber-500 focus:bg-white transition-all duration-300 text-gray-800 placeholder-gray-400"
                            />
                        </div>
                    </div>

                    <div className="space-y-2">
                        <label className="block text-sm font-semibold text-gray-700 ml-1">
                            <i className="fas fa-lock mr-2 text-amber-600"></i>
                            Password
                        </label>
                        <div className="relative">
                            <input required
                                   type="password"
                                   value={password}
                                   onChange={(e) => setPassword(e.target.value)}
                            placeholder="Enter your password"
                            className="w-full px-4 py-4 bg-gray-50 border-2 border-gray-200 rounded-2xl focus:border-amber-500 focus:bg-white transition-all duration-300 text-gray-800 placeholder-gray-400"
                            />
                        </div>
                    </div>
                </div>

                {error && (
                <div className="bg-red-50 border-l-4 border-red-400 p-4 rounded-r-xl">
                    <div className="flex">
                        <i className="fas fa-exclamation-triangle text-red-400 mr-3 mt-0.5"></i>
                        <p className="text-sm text-red-700">{error}</p>
                    </div>
                </div>
                )}

                <button type="submit"
                        disabled={loading}
                        className="w-full bg-gradient-to-r from-amber-600 to-orange-600 hover:from-amber-700 hover:to-orange-700 text-white font-bold py-4 px-6 rounded-2xl transition-all duration-300 transform hover:scale-[1.02] disabled:opacity-50 disabled:transform-none shadow-lg">
                    {loading ? (
                    <div className="flex items-center justify-center">
                        <i className="fas fa-spinner fa-spin mr-2"></i>
                        Processing...
                    </div>
                    ) : (
                    <div className="flex items-center justify-center">
                        <i className={`fas ${
                           isLogin ? "fa-sign-in-alt" : "fa-user-plus"
                           } mr-2`}></i>
                        {isLogin ? "Sign In to BookVault" : "Join BookVault"}
                    </div>
                    )}
                </button>

                {/* Additional options */}
                <div className="text-center space-y-3">
                    {isLogin && (
                    <a href="#"
                       className="text-sm text-amber-600 hover:text-amber-700 font-medium">
                        <i className="fas fa-key mr-1"></i>
                        Forgot your password?
                    </a>
                    )}

                    <div className="flex items-center justify-center space-x-4 text-xs text-gray-500">
                        <span>Secure</span>
                        <i className="fas fa-shield-alt text-green-500"></i>
                        <span>Encrypted</span>
                        <i className="fas fa-lock text-green-500"></i>
                        <span>Protected</span>
                    </div>
                </div>
            </form>

            {/* Footer */}
            <div className="bg-gradient-to-r from-gray-50 to-amber-50 p-6 text-center border-t border-gray-100">
                <p className="text-xs text-gray-600 mb-2">
                    {isLogin ? "New to BookVault?" : "Already have an account?"}
                </p>
                <button onClick={() =>
                    setIsLogin(!isLogin)}
                    className="text-amber-600 hover:text-amber-700 font-semibold text-sm"
                    >
                    {isLogin ? "Create your free account" : "Sign in instead"}
                </button>
            </div>
        </div>

        {/* Decorative elements */}
        <div className="absolute -top-4 -left-4 w-8 h-8 bg-amber-400 rounded-full opacity-20"></div>
        <div className="absolute -bottom-4 -right-4 w-12 h-12 bg-orange-400 rounded-full opacity-15"></div>
    </div>

    <style jsx global>
        {`
        @keyframes float {
                  0%, 100% { transform: translateY(0px) rotate(0deg); }
                  50% { transform: translateY(-20px) rotate(5deg); }
                }

        @keyframes floatReverse {
                  0%, 100% { transform: translateY(0px) rotate(0deg); }
                  50% { transform: translateY(20px) rotate(-5deg); }
                }

        @keyframes pulse {
                  0%, 100% { opacity: 0.3; }
                  50% { opacity: 0.6; }
                }

                .floating-book-1 {
                  animation: float 6s ease-in-out infinite;
                }

                .floating-book-2 {
                  animation: floatReverse 8s ease-in-out infinite;
                  animation-delay: -2s;
                }

                .floating-book-3 {
                  animation: float 7s ease-in-out infinite;
                  animation-delay: -4s;
                }

                .floating-book-4 {
                  animation: pulse 4s ease-in-out infinite;
                }

                .floating-book-5 {
                  animation: floatReverse 9s ease-in-out infinite;
                  animation-delay: -1s;
                }
        }
       </style>
</div>
  );
}

export default MainComponent;
